package queued_dialog;

import com.sun.istack.internal.NotNull;

import java.util.AbstractQueue;
import java.util.IllegalFormatCodePointException;
import java.util.Random;
import java.util.function.Supplier;

/**
 * Created by ivan on 01.06.17.
 */

/**
 * Server's class for dialog. Send messages which are generated by given generator to {@link DialogQueue} with
 * random generated latency {@link Random} between given min and max latencies
 * @param <T> type of messages
 */
public class DialogServer<T> implements Runnable {
    private final AbstractQueue<T> queue;
    private final long minLatency;
    private final long maxLatency;
    private final Random random;
    private final Supplier<T> messageGenerator;


    /**
     * Constructor
     * @param queue {@link DialogQueue} for messages, mustn't be null
     * @param minLatency minimal latency in millis between sending messages,
     *                   must be not less than specified value {@link Dialog}
     * @param maxLatency maximal latency in millis between sending messages, must be not less than minLatency
     * @param messageGenerator message generator, mustn't be null
     */
    public DialogServer(@NotNull DialogQueue<T> queue , long minLatency, long maxLatency,
                       @NotNull Supplier<T> messageGenerator) {
        if (minLatency < 0 || maxLatency < 0) {
            throw new IllegalArgumentException("Server's latencies can't be less than zero");
        }
        if (minLatency > maxLatency) {
            throw new IllegalArgumentException("Server's max latency must bi grater than min latency");
        }
        if (minLatency < Dialog.MINIMAL_LATENCY) {
            throw new IllegalArgumentException("Server wants to send messages too often");
        }
        if (queue == null) {
            throw new IllegalArgumentException("Server's queue mustn't be null");
        }
        if (messageGenerator == null) {
            throw new IllegalArgumentException("Server's message generator mustn't be null");
        }

        this.queue = queue;
        this.minLatency = minLatency;
        this.maxLatency = maxLatency;
        this.random = new Random(System.currentTimeMillis());
        this.messageGenerator = messageGenerator;
    }

    /**
     * Run server
     */
    @Override
    public void run() {
        System.out.println("Server was started");
        try {
            while (!Thread.interrupted()) {
                T message = messageGenerator.get();

                Thread.sleep(getRandomLatency());
                boolean result = false;
                while (!Thread.interrupted() && !(result = queue.offer(message))) {
                    Thread.sleep(getRandomLatency());
                }

                if (result) {
                    System.out.println("Server send message: " + message.toString());
                }
            }
        } catch (InterruptedException ignored) {}
        System.out.println("Server was interrupted");
    }

    private long getRandomLatency() {
        return (Math.abs(random.nextLong()) % (maxLatency - minLatency + 1)) + minLatency;
    }
}
